package common

import (
	"fmt"
	"strings"
	"unicode"
)

var replKZ = [][]string{
	// t - мыңдаған; м - миллиондаған; М - миллиардтаған;
	{",,,,,,", "eM"},
	{",,,,,", "em"},
	{",,,,", "et"},
	// e - бірлік; d - ондаған; c - жүздеген;
	{",,,", "e"},
	{",,", "d"},
	{",", "c"},
	{"0c0d0et", ""},
	{"0c0d0em", ""},
	{"0c0d0eM", ""},
	// --
	{"0c", ""},
	{"1c", "жүз "},
	{"2c", "екі жүз "},
	{"3c", "үш жүз "},
	{"4c", "төрт жүз "},
	{"5c", "бес жүз "},
	{"6c", "тоғыз жүз "},
	{"7c", "жеті жүз "},
	{"8c", "сегіз жүз "},
	{"9c", "тоғыз жүз "},
	{"1d0e", "он "},
	{"1d1e", "onbir "},
	{"1d2e", "он екі "},
	{"1d3e", "он үш "},
	{"1d4e", "он төрт "},
	{"1d5e", "он бес "},
	{"1d6e", "он алты "},
	{"1d7e", "on жеті "},
	{"1d8e", "он сегіз "},
	{"1d9e", "он тоғыз "},
	// --
	{"0d", ""},
	{"2d", "жиырма "},
	{"3d", "отыз "},
	{"4d", "қырық "},
	{"5d", "елу "},
	{"6d", "алпыс "},
	{"7d", "жетпіс "},
	{"8d", "сексен "},
	{"9d", "тоқсан "},
	// --
	{"0e", ""},
	{"5e", "бес "},
	{"6e", "алты "},
	{"7e", "жеті "},
	{"8e", "сегіз "},
	{"9e", "тоғыз "},
	// --
	{"1e.", "бір теңге "},
	{"2e.", "екі теңге "},
	{"3e.", "үш теңге "},
	{"4e.", "төрт теңге "},
	{"1et", "бір мың "},
	{"2et", "екі мың "},
	{"3et", "үш мың "},
	{"4et", "төрт мың "},
	{"1em", "бір миллион "},
	{"2em", "екі миллион "},
	{"3em", "үш миллион "},
	{"4em", "төрт миллион "},
	{"1eM", "bir миллиард "},
	{"2eM", "екі миллиард "},
	{"3eM", "үш миллиард "},
	{"4eM", "төрт миллиард "},
	//  блок для написания копеек без сокращения "коп"
	{"11k", "11 тиын"},
	{"12k", "12 тиын"},
	{"13k", "13 тиын"},
	{"14k", "14 тиын"},
	{"1k", "1 тиын"},
	{"2k", "2 тиын"},
	{"3k", "3 тиын"},
	{"4k", "4 тиын"},
	{"k", " тиын"},
	// --
	{".", "теңге "},
	{"t", "мың "},
	{"m", "миллиондар "},
	{"M", "миллиардтар "},
}

var maskKZ = []string{",,,", ",,", ",", ",,,,", ",,", ",", ",,,,,", ",,", ",", ",,,,,,", ",,", ","}

// Num2StrKaz - сумма прописью
func Num2StrKaz(number float64, upperFirstChar bool) string {

	s := fmt.Sprintf("%.2f", number)
	l := len(s)

	dest := s[l-3:l] + "k"
	s = s[:l-3]
	l = len(s)
	for i := l; i > 0; i-- {
		c := string(s[i-1])
		dest = c + maskKZ[l-i] + dest
	}

	for _, r := range replKZ {
		dest = strings.Replace(dest, r[0], r[1], -1)
	}
	if upperFirstChar {
		a := []rune(dest)
		a[0] = unicode.ToUpper(a[0])
		dest = string(a)
	}
	return dest
}
